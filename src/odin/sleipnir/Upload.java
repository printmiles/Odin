/* Class name: Upload
 * File name:  Upload.java
 * Project:    Open Document and Information Network (Odin)
 ** Copyright:  Â© 2007-2012 Alexander J. Harris, all rights reserved
 * Created:    16-Jul-2010 19:33:27
 * Modified:   16-Jul-2010
 *
 * Version History:
 * ~ ~ ~ ~ ~ ~ ~ ~ ~
 * 0.001  16-Jul-2010 Initial build
 */

package odin.sleipnir;

import java.io.File;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.util.*;
import javax.swing.*;
import odin.shared.xml.*;

/**
 * Javadoc to follow.
 * @version 0.001
 * @author Alexander J. Harris (email: Alexander.J.Harris(at)btinternet.com)
 */
public class Upload extends JInternalFrame
{
  private TreeMap<String,String> tmLanguages;
  private TreeMap<String,String> tmCountries;
  private ResourceBundle rbUser;
  private Locale lHome;
  private File fUpload;
  private String mime;
  private ProgressForm pf;

    /** Creates new form Upload */
    public Upload(ResourceBundle rb, Locale l)
    {
      super("Upload",true,true,true,true);
      super.setLayer(1);
      rbUser = rb;
      lHome = l;
      tmLanguages = new TreeMap<String,String>();
      tmCountries = new TreeMap<String,String>();
      initComponents();
      jlMime.setVisible(false);
      jlMeta.setVisible(false);
      jlLang.setVisible(false);
      jlXml.setVisible(false);

      // Get the complete list of languages supported within Locale.
      String[] listLangs = Locale.getISOLanguages();
      // Iterate through the list and add them to the TreeMaps
      // Start with languages
      for (String lang : listLangs)
      {
        String name = (new Locale(lang)).getDisplayLanguage(lHome);
        tmLanguages.put(name,lang);
      }
      // Now countries
      String[] listCountries = Locale.getISOCountries();
      for (String country : listCountries)
      {
        String name = (new Locale(lHome.getLanguage(), country)).getDisplayCountry(lHome);
        tmCountries.put(name,country);
      }
      // Now add both items to the GUI combo-boxes
      Iterator iLang = tmLanguages.keySet().iterator();
      while (iLang.hasNext())
      {
        jcbLang.addItem(iLang.next().toString());
      }
      Iterator iCountry = tmCountries.keySet().iterator();
      while (iCountry.hasNext())
      {
        jcbCountry.addItem(iCountry.next().toString());
      }
      if (lHome.getDisplayLanguage(lHome).equals(""))
      {
        Locale lTemp = new Locale(System.getProperty("user.language"), System.getProperty("user.country"));
        jcbLang.setSelectedItem(lTemp.getDisplayLanguage(lTemp));
        jcbCountry.setSelectedItem(lTemp.getDisplayCountry(lTemp));
      }
      else
      {
        String lng = lHome.getDisplayLanguage(lHome);
        String ctry = lHome.getDisplayCountry(lHome);
        jcbLang.setSelectedItem(lng);
        jcbCountry.setSelectedItem(ctry);
      }
      GenericTable gT = new GenericTable();
      ArrayList rows = new ArrayList();
      ArrayList columns = new ArrayList();
      columns.add(rb.getString("gui.upload.table.key"));
      columns.add(rb.getString("gui.upload.table.value"));
      rows.add(new Object[]{"",""});
      gT.setData(columns, rows);
      jtAttributes.setModel(gT);
      MainWindow mw = MainWindow.getMainWindow();
      mw.addToDesktop(this);
      this.setVisible(true);
      this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      jlStatus.setText(rb.getString("load.splash.3"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jpFile = new javax.swing.JPanel();
    jlFileName = new javax.swing.JLabel();
    jbSelect = new javax.swing.JButton();
    jpMeta = new javax.swing.JPanel();
    jpLocale = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jcbLang = new javax.swing.JComboBox();
    jcbCountry = new javax.swing.JComboBox();
    jlFlag = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jpAuthor = new javax.swing.JPanel();
    jtfFirstName = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jtfSurname = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    jtfCompany = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    jtfEmail = new javax.swing.JTextField();
    jLabel7 = new javax.swing.JLabel();
    jtfWebsite = new javax.swing.JTextField();
    jLabel8 = new javax.swing.JLabel();
    jcbPrefix = new javax.swing.JComboBox();
    jPanel5 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jtaKeywords = new javax.swing.JTextArea();
    jLabel9 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    jtAttributes = new javax.swing.JTable();
    jLabel10 = new javax.swing.JLabel();
    jbAddAttribute = new javax.swing.JButton();
    jbUpload = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    jlMime = new javax.swing.JLabel();
    jlMeta = new javax.swing.JLabel();
    jlLang = new javax.swing.JLabel();
    jlXml = new javax.swing.JLabel();
    jlStatus = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle(rbUser.getString("gui.main.menu.Upload")); // NOI18N

    jpFile.setBorder(javax.swing.BorderFactory.createTitledBorder(rbUser.getString("gui.upload.choice"))); // NOI18N

    jlFileName.setText(rbUser.getString("gui.upload.noFile")); // NOI18N

    jbSelect.setText(rbUser.getString("gui.upload.SelectButton")); // NOI18N
    jbSelect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbSelectActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jpFileLayout = new javax.swing.GroupLayout(jpFile);
    jpFile.setLayout(jpFileLayout);
    jpFileLayout.setHorizontalGroup(
      jpFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpFileLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jbSelect)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jlFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        .addContainerGap())
    );
    jpFileLayout.setVerticalGroup(
      jpFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpFileLayout.createSequentialGroup()
        .addGroup(jpFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jbSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jlFileName))
        .addContainerGap(6, Short.MAX_VALUE))
    );

    jpMeta.setBorder(javax.swing.BorderFactory.createTitledBorder(rbUser.getString("gui.upload.meta"))); // NOI18N

    jpLocale.setBorder(javax.swing.BorderFactory.createTitledBorder(rbUser.getString("gui.upload.locale"))); // NOI18N

    jLabel1.setText(rbUser.getString("gui.upload.language")); // NOI18N

    jcbCountry.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcbCountryActionPerformed(evt);
      }
    });

    jLabel2.setText(rbUser.getString("gui.upload.country")); // NOI18N

    javax.swing.GroupLayout jpLocaleLayout = new javax.swing.GroupLayout(jpLocale);
    jpLocale.setLayout(jpLocaleLayout);
    jpLocaleLayout.setHorizontalGroup(
      jpLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpLocaleLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jpLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel1)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jpLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jcbCountry, 0, 152, Short.MAX_VALUE)
          .addComponent(jcbLang, 0, 152, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jlFlag, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    jpLocaleLayout.setVerticalGroup(
      jpLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpLocaleLayout.createSequentialGroup()
        .addGroup(jpLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(jcbLang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jpLocaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jcbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2)))
      .addComponent(jlFlag, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    jpAuthor.setBorder(javax.swing.BorderFactory.createTitledBorder(rbUser.getString("gui.upload.authorDetails"))); // NOI18N

    jLabel3.setText(rbUser.getString("gui.upload.firstName")); // NOI18N

    jLabel4.setText(rbUser.getString("gui.upload.surname")); // NOI18N

    jLabel5.setText(rbUser.getString("gui.upload.organisation")); // NOI18N

    jLabel6.setText(rbUser.getString("gui.upload.email")); // NOI18N

    jLabel7.setText(rbUser.getString("gui.upload.website")); // NOI18N

    jLabel8.setText(rbUser.getString("gui.upload.prefix")); // NOI18N

    jcbPrefix.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-None-", "Mr", "Mrs", "Ms", "Miss", "Dr", "Prof", "Sir", "Rev", "Lady" }));

    javax.swing.GroupLayout jpAuthorLayout = new javax.swing.GroupLayout(jpAuthor);
    jpAuthor.setLayout(jpAuthorLayout);
    jpAuthorLayout.setHorizontalGroup(
      jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpAuthorLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jLabel3)
          .addComponent(jLabel8)
          .addComponent(jLabel4)
          .addComponent(jLabel7)
          .addComponent(jLabel6)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jtfWebsite, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addComponent(jtfEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addComponent(jtfCompany, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addComponent(jtfSurname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addComponent(jtfFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
          .addComponent(jcbPrefix, 0, 180, Short.MAX_VALUE))
        .addContainerGap())
    );
    jpAuthorLayout.setVerticalGroup(
      jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpAuthorLayout.createSequentialGroup()
        .addGap(11, 11, 11)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jcbPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel8))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(jtfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(6, 6, 6)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jtfSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jtfCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6))
        .addGap(8, 8, 8)
        .addGroup(jpAuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jtfWebsite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel7))
        .addContainerGap(16, Short.MAX_VALUE))
    );

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(rbUser.getString("gui.upload.keywordTitle"))); // NOI18N

    jtaKeywords.setColumns(20);
    jtaKeywords.setRows(5);
    jScrollPane1.setViewportView(jtaKeywords);

    jLabel9.setText(rbUser.getString("gui.upload.keywords")); // NOI18N

    jtAttributes.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null},
        {null, null},
        {null, null},
        {null, null}
      },
      new String [] {
        "Attribute Name", "Attribute Value"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }
    });
    jScrollPane2.setViewportView(jtAttributes);

    jLabel10.setText(rbUser.getString("gui.upload.specialised")); // NOI18N

    jbAddAttribute.setText(rbUser.getString("gui.upload.newAttribute")); // NOI18N
    jbAddAttribute.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbAddAttributeActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
          .addComponent(jLabel9)
          .addComponent(jLabel10)
          .addComponent(jbAddAttribute, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addComponent(jLabel9)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jLabel10)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jbAddAttribute)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout jpMetaLayout = new javax.swing.GroupLayout(jpMeta);
    jpMeta.setLayout(jpMetaLayout);
    jpMetaLayout.setHorizontalGroup(
      jpMetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMetaLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jpMetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jpAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jpLocale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    jpMetaLayout.setVerticalGroup(
      jpMetaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jpMetaLayout.createSequentialGroup()
        .addComponent(jpLocale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jpAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    jbUpload.setText(rbUser.getString("gui.upload.upload")); // NOI18N
    jbUpload.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbUploadActionPerformed(evt);
      }
    });

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(rbUser.getString("gui.upload.checks"))); // NOI18N

    jlMime.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jlMime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/odin/sleipnir/images/tick.png"))); // NOI18N
    jlMime.setText(rbUser.getString("gui.upload.checks.mime")); // NOI18N

    jlMeta.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jlMeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/odin/sleipnir/images/tick.png"))); // NOI18N
    jlMeta.setText(rbUser.getString("gui.upload.checks.meta")); // NOI18N

    jlLang.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jlLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/odin/sleipnir/images/tick.png"))); // NOI18N
    jlLang.setText(rbUser.getString("gui.upload.checks.lang")); // NOI18N

    jlXml.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jlXml.setIcon(new javax.swing.ImageIcon(getClass().getResource("/odin/sleipnir/images/tick.png"))); // NOI18N
    jlXml.setText(rbUser.getString("gui.upload.checks.xml")); // NOI18N

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jlMime)
        .addGap(18, 18, 18)
        .addComponent(jlMeta)
        .addGap(18, 18, 18)
        .addComponent(jlLang)
        .addGap(18, 18, 18)
        .addComponent(jlXml)
        .addContainerGap(129, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jlMime)
          .addComponent(jlMeta)
          .addComponent(jlLang)
          .addComponent(jlXml))
        .addContainerGap(12, Short.MAX_VALUE))
    );

    jlStatus.setText(rbUser.getString("gui.upload.status")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jpMeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jlStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jbUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jpFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jpFile, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jpMeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jbUpload)
          .addComponent(jlStatus))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jcbCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCountryActionPerformed
      String selectedCountry = (String) jcbCountry.getModel().getSelectedItem();
      String strISO = tmCountries.get(selectedCountry);
      java.net.URL iconURL = this.getClass().getResource("images/flags/"+ strISO.toLowerCase() +".png");
      if (iconURL != null)
      {
        jlFlag.setIcon(new ImageIcon(this.getClass().getResource("images/flags/"+ strISO.toLowerCase() +".png")));
      }
      else
      {
        jlFlag.setIcon(new ImageIcon(this.getClass().getResource("images/flags/zz.png")));
      }
    }//GEN-LAST:event_jcbCountryActionPerformed

    private void jbSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSelectActionPerformed
      jlMime.setVisible(false);
      jlMeta.setVisible(false);
      jlLang.setVisible(false);
      jlXml.setVisible(false);
      ResourceBundle rb = ResourceBundle.getBundle("odin.sleipnir.Sleipnir", lHome);
      jlStatus.setText(rb.getString("gui.upload.SelectButton"));
      JFileChooser jFC = new JFileChooser();
      jFC.setDialogTitle(rb.getString("gui.upload.choice"));
      jFC.setCurrentDirectory(new File(this.getClass().toString()));
      int returnVal = jFC.showOpenDialog(this);
      if (returnVal == 1)
      {
        // User cancelled their selection
        jlStatus.setText(rb.getString("gui.upload.fileCancel"));
        return;
      }
      fUpload = jFC.getSelectedFile();
      if (fUpload.exists())
      {
        jlStatus.setText(rb.getString("gui.upload.fileExamine"));
        jlFileName.setText(fUpload.getAbsolutePath());
        this.repaint();
        pf = new ProgressForm(rbUser);
        pf.setProgress(6);
        addAttribute("File size (b)", ""+fUpload.length());
        // Get the meta data inside the document
        MetadataWorker mdw = new MetadataWorker(fUpload, pf, this, rb);
        mdw.execute();
        // Find the language of the document
        LanguageWorker lw = new LanguageWorker(fUpload, pf, this, rb);
        lw.execute();
      }
      else
      {
        jlFileName.setText(rb.getString("gui.upload.noFile"));
      }
    }//GEN-LAST:event_jbSelectActionPerformed

    public void setMetadata(HashMap<String,HashMap<String,String>> hm)
    {
      HashMap<String,String> hmMime = hm.get("mime");
      HashMap<String,String> hmMeta = hm.get("meta");
      mime = hmMime.get("mime");
      jlStatus.setText(rbUser.getString("gui.upload.status"));
      if (!mime.equals(""))
      {
        showMimeCheck();
      }
      Iterator i = hmMeta.keySet().iterator();
      while (i.hasNext())
      {
        String key = i.next().toString();
        String value = hmMeta.get(key);
        addAttribute(key,value);
        if (key.toLowerCase().equals("author"))
        {
          StringTokenizer st = new StringTokenizer(value);
          String authorName = "";
          String authorSurname = "";
          while (st.hasMoreTokens())
          {
            String temp = st.nextToken();
            if (authorName.equals(""))
            {
              authorName = temp;
            }
            else
            {
              authorSurname = authorSurname + " " + temp;
            }
          }
          jtfFirstName.setText(authorName);
          jtfSurname.setText(authorSurname);
        }
      }
      jlStatus.setText(rbUser.getString("gui.upload.status.meta"));
      showMetaCheck();
      if (mime.equals("application/xml"))
      {
        showXmlCheck();
        jlStatus.setText(rbUser.getString("gui.upload.status.xml"));
        pf.increaseProgress();
      }
    }

    public void addAttribute(String name, String value)
    {
      GenericTable gt = (GenericTable) jtAttributes.getModel();
      if (((String) gt.getValueAt(0, 0)).equals("")) { gt.clear(); }
      gt.addRow(new Object[]{name,value});
    }

    public void setLanguage(HashMap<String,String>hmLang)
    {
      Locale lLang = new Locale(hmLang.get("lang"));
      String name = lLang.getDisplayLanguage(lHome);
      jcbLang.setSelectedItem(name);

      showLangCheck(Boolean.valueOf(hmLang.get("certain")));

      if (Boolean.valueOf(hmLang.get("certain")))
      {
        jlStatus.setText(rbUser.getString("gui.upload.lang.certain"));
      }
      else
      {
        jlStatus.setText(rbUser.getString("gui.upload.lang.uncertain"));
      }
      pf.closeWindow();
    }

    private void jbUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUploadActionPerformed
      pf = new ProgressForm(rbUser);
      pf.setProgress(9);

      Document uploadDocument = new Document();
      uploadDocument.setUsername(System.getProperty("user.name"));
      String localaddress = "127.0.0.1";
      boolean isOkToSend = true;
      try
      {
        localaddress = java.net.InetAddress.getLocalHost().toString();
      }
      catch (UnknownHostException ex)
      {
        System.err.println(rbUser.getString("gui.error.local"));
      }
      finally
      {
        uploadDocument.setIpaddress(localaddress);
      }
      try
      {
        javax.activation.DataHandler dhDoc = new javax.activation.DataHandler(fUpload.toURI().toURL());
        uploadDocument.setDocument(dhDoc);
      }
      catch (MalformedURLException ex)
      {
        this.setStatus(rbUser.getString("gui.error.send"));
        isOkToSend = false;
      }
      pf.increaseProgress();
      ObjectFactory factory = new ObjectFactory();
      Document.Metadata documentMetadata = factory.createDocumentMetadata();
      documentMetadata.setTitle(fUpload.getName());
      documentMetadata.setMimetype(mime);
      String fileExt = fUpload.getName();
      if (fileExt.contains("."))
      {
        fileExt = fileExt.substring(fileExt.lastIndexOf(".")+1, fileExt.length());
      }
      else
      {
        fileExt="";
      }
      documentMetadata.setFileextension(fileExt);
      Document.Metadata.Author metadataAuthor = factory.createDocumentMetadataAuthor();
      Document.Metadata.Attributes metadataAttributes = factory.createDocumentMetadataAttributes();
      Document.Metadata.Keywords metadataKeywords = factory.createDocumentMetadataKeywords();
      Document.Metadata.Locale metadataLocale = factory.createDocumentMetadataLocale();

      metadataAuthor.setFirstName(jtfFirstName.getText());
      metadataAuthor.setSurname(jtfSurname.getText());
      metadataAuthor.setCompany(jtfCompany.getText());
      metadataAuthor.setEmail(jtfEmail.getText());
      metadataAuthor.setWebsite(jtfWebsite.getText());
      metadataAuthor.setPrefix((String) jcbPrefix.getSelectedItem());
      documentMetadata.setAuthor(metadataAuthor);
      pf.increaseProgress();

      metadataLocale.setLanguage(tmLanguages.get((String) jcbLang.getSelectedItem()));
      metadataLocale.setCountry(tmCountries.get((String) jcbCountry.getSelectedItem()));
      documentMetadata.setLocale(metadataLocale);
      pf.increaseProgress();

      if (!(jtaKeywords.getText().trim()).equals(""))
      {
        StringTokenizer st = new StringTokenizer(jtaKeywords.getText(),";");
        while (st.hasMoreTokens())
        {
          metadataKeywords.getKeyword().add((String) st.nextToken());
        }
      }
      documentMetadata.setKeywords(metadataKeywords);
      pf.increaseProgress();

      GenericTable gt = (GenericTable) jtAttributes.getModel();
      for (int i = 0; i < gt.getRowCount(); i++)
      {
        Object[] temp = gt.getRow(i);
        Document.Metadata.Attributes.Attribute a = factory.createDocumentMetadataAttributesAttribute();
        a.setKey((String)temp[0]);
        a.setValue((String)temp[1]);
        metadataAttributes.getAttribute().add(a);
      }
      documentMetadata.setAttributes(metadataAttributes);
      uploadDocument.setMetadata(documentMetadata);
      pf.increaseProgress();
      pf.setStatus(rbUser.getString("gui.upload.ready"));

      if (isOkToSend)
      {
        // Delegate the uploading to a worker thread
        UploadWorker uw = new UploadWorker(pf, uploadDocument, this, rbUser);
        uw.execute();
      }
    }//GEN-LAST:event_jbUploadActionPerformed

    private void jbAddAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddAttributeActionPerformed
      Attribute a = new Attribute(this, rbUser);
    }//GEN-LAST:event_jbAddAttributeActionPerformed

    public void setStatus(String status)
    {
      jlStatus.setText(status);
    }

    private void showMimeCheck()
    {
      jlMime.setVisible(true);
    }

    private void showMetaCheck()
    {
      jlMeta.setVisible(true);
    }

    private void showLangCheck(boolean isCertain)
    {
      if (isCertain)
      {
        jlLang.setIcon(new ImageIcon(getClass().getResource("/odin/sleipnir/images/tick.png")));
        jlLang.setText(rbUser.getString("gui.upload.lang.certain"));
        jlLang.setVisible(true);
      }
      else
      {
        jlLang.setIcon(new ImageIcon(getClass().getResource("/odin/sleipnir/images/alert.png")));
        jlLang.setText(rbUser.getString("gui.upload.lang.uncertain"));
        jlLang.setVisible(true);
      }
    }

    private void showXmlCheck()
    {
      jlXml.setVisible(true);
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JButton jbAddAttribute;
  private javax.swing.JButton jbSelect;
  private javax.swing.JButton jbUpload;
  private javax.swing.JComboBox jcbCountry;
  private javax.swing.JComboBox jcbLang;
  private javax.swing.JComboBox jcbPrefix;
  private javax.swing.JLabel jlFileName;
  private javax.swing.JLabel jlFlag;
  private javax.swing.JLabel jlLang;
  private javax.swing.JLabel jlMeta;
  private javax.swing.JLabel jlMime;
  private javax.swing.JLabel jlStatus;
  private javax.swing.JLabel jlXml;
  private javax.swing.JPanel jpAuthor;
  private javax.swing.JPanel jpFile;
  private javax.swing.JPanel jpLocale;
  private javax.swing.JPanel jpMeta;
  private javax.swing.JTable jtAttributes;
  private javax.swing.JTextArea jtaKeywords;
  private javax.swing.JTextField jtfCompany;
  private javax.swing.JTextField jtfEmail;
  private javax.swing.JTextField jtfFirstName;
  private javax.swing.JTextField jtfSurname;
  private javax.swing.JTextField jtfWebsite;
  // End of variables declaration//GEN-END:variables

}
